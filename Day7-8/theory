Topics To explore

NPM - NPM stands for node pacakage manager . it is used for installing all required 
      drivers and pacakages . 

HTTP Server
            - HTTP server is the creted server using node/express js . 

Express Framework - Express is a Framework wrapped over Node js . It simplifies the manual tasks in Node js . 


Middleware 
    - Middleware functions are functions that have access to the request object (req), 
    the response object (res), and the next function in the application’s request-response cycle. 
    The next function is a function in the Express router which, when invoked, executes the middleware 
    succeeding the current middleware.

Middleware functions can perform the following tasks:

Execute any code.
Make changes to the request and the response objects.
End the request-response cycle.
Call the next middleware in the stack.

        var express = require('express')
        var app = express() 

        var myLogger = function (req, res, next) {
        console.log('LOGGED')
        next()
        }

        app.use(myLogger)

        app.get('/', function (req, res) {
        res.send('Hello World!')
        })

        app.listen(3000)


Routing
    - Routing refers to how an application’s endpoints (URIs) respond to client requests.
    You define routing using methods of the Express app object that correspond to HTTP methods;
    for example, app.get() to handle GET requests and app.post to handle POST requests. For a full list,
   see app.METHOD. You can also use app.all() to handle all HTTP methods and app.use() to specify middleware
   as the callback function 

        var express = require('express')
        var app = express()

        // respond with "hello world" when a GET request is made to the homepage
        app.get('/', function (req, res) {
        res.send('hello world')
        })

MySQL
    npm install mysql

        var mysql = require('mysql')
        var connection = mysql.createConnection({
        host: 'localhost',
        user: 'dbuser',
        password: 's3kreee7',
        database: 'my_db'
        })

        connection.connect()

        connection.query('SELECT 1 + 1 AS solution', function (err, rows, fields) {
        if (err) throw err

        console.log('The solution is: ', rows[0].solution)
        })

        connection.end()

Mongoose
    npm install mongodb 

        var MongoClient = require('mongodb').MongoClient

        MongoClient.connect('mongodb://localhost:27017/animals', function (err, db) {
        if (err) throw err

        db.collection('mammals').find().toArray(function (err, result) {
            if (err) throw err

            console.log(result)
        })
        })